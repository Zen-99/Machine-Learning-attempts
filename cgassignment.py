# -*- coding: utf-8 -*-
"""CGAssignment.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1OcYLxKiRSGa6iLMDdCveLGwGSws5Z0I4
"""

from google.colab import drive
drive.mount('/content/drive')

# Commented out IPython magic to ensure Python compatibility.
import cv2
import numpy as np
import math
import os
import matplotlib.pyplot as plt
import pandas as pd
# %matplotlib inline

def prepareImage(image,height):
  assert image.ndim in (2,3)
  if(image.ndim==3):
    image=cv2.cvtColor(image,cv2.COLOR_BGR2GRAY)
  h=image.shape[0]
  fac=height/h
  resizedImage=cv2.resize(image,dsize=None,fx=fac,fy=fac)
  return resizedImage

imageDir='/content/drive/MyDrive/CG/paper.jpg'

image=cv2.imread(imageDir)
plt.figure(figsize=(20,10))
plt.imshow(image,cmap='gray')

imageGray=prepareImage(image,1500)
plt.figure(figsize=(20,10))
plt.imshow(imageGray)

imageBlur = cv2.blur(imageGray,(20,10))
ret3,threshold=cv2.threshold(imageBlur,0,255,cv2.THRESH_BINARY+cv2.THRESH_OTSU)

plt.figure(figsize=(20,10))
plt.imshow(threshold,cmap='gray')

(components,_)=cv2.findContours(threshold,cv2.RETR_LIST,cv2.CHAIN_APPROX_SIMPLE)
res=[]
for c in components:
  if cv2.contourArea(c)<350 :
    continue
  currBox=cv2.boundingRect(c)
  (x,y,w,h)=currBox
  currImage=imageGray[y:y+h,x:x+w]
  res.append((currBox,currImage))

res=sorted(res,key=lambda entry:entry[0][0])
i=0
for(j,w) in enumerate(res):
  (wordBox,wordImage)=w
  (x,y,w,h)=wordBox
  i=i+1
  cv2.rectangle(imageGray,(x,y),(x+w,y+h),0,1)
  cv2.imwrite("/content/drive/MyDrive/CG/saved/"+str(i)+".png",wordImage)
  
plt.figure(figsize=(30,20))
plt.imshow(imageGray,cmap='gray')

dataFrame=pd.read_csv('/content/drive/MyDrive/CG/csv/data.csv')
del dataFrame['Unnamed: 2']
del dataFrame['Unnamed: 3']
del dataFrame['Unnamed: 4']
dataFrame=dataFrame.dropna()

dataFrame.head(5)

imageWidth=70
imageHeight=70
imageList=[]
for image in os.listdir('/content/drive/MyDrive/CG/saved'):
  imageArray=cv2.imread(os.path.join('/content/drive/MyDrive/CG/saved',image),cv2.IMREAD_GRAYSCALE)
  newArray=cv2.resize(imageArray,(imageWidth,imageWidth))
  imageList.append((image,newArray))

def setColumn(name):
  for image,array in imageList:
    if name == image:
      print(name)
      return array

dataFrame['Images']=dataFrame['Image'].apply(setColumn)

plt.imshow(imageList[2][1],cmap='gray')

dataFrame.head()

from sklearn.preprocessing import LabelEncoder,OneHotEncoder

dataFrame['Label_Class']=dataFrame['Class']

labelEncoder=LabelEncoder()

dataFrame['Label_Class']=labelEncoder.fit_transform(dataFrame['Label_Class'])

outputClasses=len(labelEncoder.classes_)
LabelClasses=labelEncoder.classes_

import pickle 
with open('/content/drive/MyDrive/CG/csv/Label_Class','wb') as f:
  pickle.dump(LabelClasses,f)

dataFrame.head()

oneHotEncoder=OneHotEncoder()
labels=oneHotEncoder.fit_transform(dataFrame.Label_Class.values.reshape(-1,1)).toarray()

trainingSet=dataFrame['Images']
trainSet=[]
for image in trainingSet:
  image=image.reshape(imageWidth,imageHeight,1)
  trainSet.append(image)
trainSet=np.array(trainSet)

trainSet.shape

trainLabels=dataFrame.Label_Class.values

from tensorflow.keras.layers import Input,Conv2D,Dense,Flatten,Dropout,MaxPooling2D,BatchNormalization,GlobalMaxPooling2D
from tensorflow.keras.models import Model

input=Input(shape=(imageWidth,imageHeight,1))
x=Conv2D(32,(3,3),activation='relu',padding='same')(input)
x=BatchNormalization()(x)
x=Conv2D(32,(3,3),activation='relu',padding='same')(x)
x=BatchNormalization()(x)
x=MaxPooling2D((2,2))(x)
x=Dropout(0.2)(x)

x=Conv2D(64,(3,3),activation='relu',padding='same')(x)
x=BatchNormalization()(x)
x=Conv2D(64,(3,3),activation='relu',padding='same')(x)
x=BatchNormalization()(x)
x=MaxPooling2D((2,2))(x)
x=Dropout(0.2)(x)

x=GlobalMaxPooling2D()(x)

x=Flatten()(x)

x=Dropout(0.2)(x)
x=Dense(1024,activation='relu')(x)
x=Dropout(0.2)(x)
x=Dense(outputClasses,activation='softmax')(x)

model=Model(input,x)

model.compile(optimizer='adam',loss='categorical_crossentropy',metrics=['accuracy'])

r=model.fit(trainSet,labels,epochs=500,batch_size=42,validation_split=0.2)

image='/content/drive/MyDrive/CG/saved/3.png'

imageArray=cv2.imread(image,cv2.IMREAD_GRAYSCALE)
newArray=cv2.resize(imageArray,(imageWidth,imageHeight))
array=newArray.reshape(-1,imageWidth,imageHeight,1)
pred=model.predict(array)
y=np.argmax(pred)

print(y)
labelEncoder.classes_[y]